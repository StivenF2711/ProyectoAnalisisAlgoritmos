TY  - JOUR
T1  - Drone challenge: A platform for promoting programming and robotics skills in K-12 education
AU  - Bermúdez, Aurelio
AU  - Casado, Rafael
AU  - Fernández, Guillermo
AU  - Guijarro, María
AU  - Olivas, Pablo
Y1  - 2019/01/01
PY  - 2019
DA  - 2019/01/01
N1  - doi: 10.1177/1729881418820425
DO  - 10.1177/1729881418820425
T2  - International Journal of Advanced Robotic Systems
JF  - International Journal of Advanced Robotic Systems
SP  -1729881418820425
VL - 16
IS - 1
PB - SAGE Publications
N2 - The development of skills related to computer programming and robotics and the introduction of computational thinking principles in high schools are worldwide trends today. An effective way of initiating young students in this world consists in proposing them stimulating challenges. This work presents a robotic platform that has been successfully used to develop a competition (called Drone Challenge) in which students had to program the navigation system for a simulated unmanned aerial vehicle (or drone). Both the competition and the supporting platform are described in detail. In particular, the article provides a deep technical description of the main components of the platform, namely the drone simulator and the navigation development framework. The results of the survey conducted after the challenge point to the suitability of the working platform deployed.
SN - 1729-8806
M3  - doi: 10.1177/1729881418820425
UR  - https://doi-org.crai.referencistas.com/10.1177/1729881418820425
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Integrating computational thinking into primary mathematics: A case study of fraction lessons with Scratch programming activities
AU  - Fang, Xiaoxuan
AU  - Ng, Davy Tsz Kit
AU  - Tam, Wing Tung
AU  - Yuen, Manwai
Y1  - 2023/06/01
PY  - 2023
DA  - 2023/06/01
N1  - doi: 10.1177/27527263231181963
DO  - 10.1177/27527263231181963
T2  - Asian Journal for Mathematics Education
JF  - Asian Journal for Mathematics Education
SP  -220
EP - 239
VL - 2
IS - 2
PB - SAGE Publications
N2 - We presented a design-based study within the context of a four-session Scratch programming activity among 23 fourth-grade students in Hong Kong. Inspired by the computational thinking (CT) strategies and the 5E instructional model, we investigated students’ mathematical learning of fractions in a Scratch (block-based programming) environment. Students developed CT concepts, practices, and perspectives by building a “fraction magic calculator” in groups. This study analyzed the lesson design, students’ drawings, interviews, and work expressing their mathematical understanding of fractions in Scratch applications. The learning tasks were designed to support the students’ fraction learning and utilized computational abstractions in the form of variables, functions, and iterations to formulate mathematical models in a programming context. Students’ artifacts and feedback showed they were interested in learning fractions in a programming learning context, contributing to exercising and improving their fraction concepts and CT. Ultimately, we emphasized the benefits of CT integrated into mathematics education, promoting students’ understanding of fraction concepts, a set of CT abilities (concepts, practices, perspectives), and learning motivation. Moreover, we suggested a set of non-cognitive skills (e.g., socializing, expressing) to enrich the CT perspectives in the framework and show the importance of developing coding communities to co-create digital artifacts among learners. Overall, we highlighted that mathematics teachers should apply and create learning tasks that promote computational thinking to forge mathematical ideas and thinking.
SN - 2752-7263
M3  - doi: 10.1177/27527263231181963
UR  - https://doi-org.crai.referencistas.com/10.1177/27527263231181963
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Combining Building Block Process With Computational Thinking Improves Learning Outcomes of Python Programming With Peer Assessment
AU  - Hsiao, Tsung-Chih
AU  - Chuang, Ya-Hsueh
AU  - Chang, Chien-Yun
AU  - Chen, Tzer-Long
AU  - Zhang, Hong-Bo
AU  - Chang, Jhih-Chung
Y1  - 2023/10/01
PY  - 2023
DA  - 2023/10/01
N1  - doi: 10.1177/21582440231217715
DO  - 10.1177/21582440231217715
T2  - Sage Open
JF  - Sage Open
SP  -21582440231217716
VL - 13
IS - 4
PB - SAGE Publications
N2 - The capability of computer programming language logic is one of the basics of technical education. How to improve students “interest in program logic design and help overcome students” fears of coding has become vital for educators. Cultivating practical talents with information technology application and basic programming development will become one of the important topics in the department of information related science. The objective of this research is to improve the ability of learning basic programming courses by using Zuvio interactive software. Zuvio employs the mathematical logic of computational thinking to analyze problems and enhance learners’ interest in learning programming skills through a graphical interface tool with building blocks. It uses innovative interactive teaching to use peer and self-assessment to study the content of the course. Zuvio improves the design ability of different groups of class learning Python programming. In line with the innovative teaching policy of the schools and the current stage of the learner’s learning model, learning effectiveness can be achieved. The research results were analyzed by midterm and final experimental group scores, and the progress of the experimental group’s scores was examined through descriptive statistics. The average and standard deviation of the assessment were used to analyze the progress of the experimental group students in the programming course. In the classroom, assessment criteria were set up as the basis for peer assessment scoring. After the midterm and final exams, the teacher assessment and peer assessment scores were analyzed for cognitive differences, and possible learning differences were analyzed. The students’ professional ability was examined to see if it met the professional standards required by the course, and whether innovative teaching methods could improve the learning outcomes of learners with different professional backgrounds in Python programming.
SN - 2158-2440
M3  - doi: 10.1177/21582440231217715
UR  - https://doi-org.crai.referencistas.com/10.1177/21582440231217715
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Revisiting the media generation: Youth media use and computational literacy instruction
AU  - Jenson, Jennifer
AU  - Droumeva, Milena
Y1  - 2017/07/01
PY  - 2017
DA  - 2017/07/01
N1  - doi: 10.1177/2042753017731357
DO  - 10.1177/2042753017731357
T2  - E-Learning and Digital Media
JF  - E-Learning and Digital Media
SP  -212
EP - 225
VL - 14
IS - 4
PB - SAGE Publications
SN - 2042-7530
M3  - doi: 10.1177/2042753017731357
UR  - https://doi-org.crai.referencistas.com/10.1177/2042753017731357
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Active Learning by Visual Programming: Pedagogical Perspectives of Instructivist and Constructivist Code Teachers and Their Implications on Actual Teaching Strategies and Students’ Programming Artifacts
AU  - Kesler, Avital
AU  - Shamir-Inbal, Tamar
AU  - Blau, Ina
Y1  - 2021/06/08
PY  - 2022
DA  - 2022/03/01
N1  - doi: 10.1177/07356331211017793
DO  - 10.1177/07356331211017793
T2  - Journal of Educational Computing Research
JF  - Journal of Educational Computing Research
SP  -28
EP - 55
VL - 60
IS - 1
PB - SAGE Publications Inc
N2 - The integration of visual programming in early formal education has been found to promote computational thinking of students. Teachers’ intuitive perspectives about optimal learning processes – “folk psychology” – impact their perspectives about teaching “folk pedagogy” and play a significant role in integrating educational technologies, such as visual programming, within the formal curriculum. This study was conducted based on the mixed method research paradigm. First, a folk pedagogy questionnaire was distributed to 89 teachers who integrate differing technologies in their classroom in order to identify the teachers’ pedagogical perspectives: constructivist versus instructivist. Then, semi-structured interviews were conducted with 24 teachers who teach Scratch in order to gain a deeper understanding of their instructivist/constructivist perspectives and actual pedagogical practices and strategies. Finally, we analyzed 96 students’ programming artifacts to explore differences, if any, in students’ outcomes related to the pedagogical perspectives of their teachers. Findings revealed that pedagogical perspectives are reflected in teaching strategies and assessment practices employed in a visual programming environment. It is promising that teaching visual programming promoted constructivist pedagogy even among instructivist teachers and was consequently reflected in student perspectives and expressed in their programming artifacts. We discuss theoretical and educational implications of these findings.
SN - 0735-6331
M3  - doi: 10.1177/07356331211017793
UR  - https://doi-org.crai.referencistas.com/10.1177/07356331211017793
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - What Else Can Be Learned When Coding? A Configurative Literature Review of Learning Opportunities Through Computational Thinking
AU  - Melro, Ana
AU  - Tarling, Georgie
AU  - Fujita, Taro
AU  - Kleine Staarman, Judith
Y1  - 2023/01/23
PY  - 2023
DA  - 2023/07/01
N1  - doi: 10.1177/07356331221133822
DO  - 10.1177/07356331221133822
T2  - Journal of Educational Computing Research
JF  - Journal of Educational Computing Research
SP  -901
EP - 924
VL - 61
IS - 4
PB - SAGE Publications Inc
N2 - Underpinning the teaching of coding with Computational Thinking has proved relevant for diverse learners, particularly given the increasing demand in upskilling for today’s labour market. While literature on computing education is vast, it remains unexplored how existing CT conceptualisations relate to the learning opportunities needed for a meaningful application of coding in non-Computer Scientists’ lives and careers. In order to identify and organise the learning opportunities in the literature about CT, we conducted a configurative literature review of studies published on Web of Science, between 2006 and 2021. Our sample gathers 34 papers and was analysed on NVivo to find key themes. We were able to organise framings of CT and related learning opportunities into three dimensions: functional, collaborative, and critical and creative. These dimensions make visible learning opportunities that range from individual cognitive development to interdisciplinary working with others, and to active participation in a technologically evolving society. By comparing and contrasting frameworks, we identify and explain different perspectives on skills. Furthermore, the three-dimensional model can guide pedagogical design and practice in coding courses.
SN - 0735-6331
M3  - doi: 10.1177/07356331221133822
UR  - https://doi-org.crai.referencistas.com/10.1177/07356331221133822
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Designing a Programming Game to Improve Children’s Procedural Abstraction Skills in Scratch
AU  - P. Rose, Simon
AU  - Habgood, M.P. Jacob
AU  - Jay, Tim
Y1  - 2020/06/23
PY  - 2020
DA  - 2020/12/01
N1  - doi: 10.1177/0735633120932871
DO  - 10.1177/0735633120932871
T2  - Journal of Educational Computing Research
JF  - Journal of Educational Computing Research
SP  -1372
EP - 1411
VL - 58
IS - 7
PB - SAGE Publications Inc
N2 - The recent shift in compulsory education from ICT-focused computing curricula to informatics, digital literacy and computer science, has resulted in children being taught computing using block-based programming tools such as Scratch, with teaching that is often limited by school resources and teacher expertise. Even without these limitations, Scratch users often produce code with ‘code smells’ such as duplicate blocks and long scripts which impact how they understand and debug projects. These code smells can be removed using procedural abstraction, an important concept in computer science rarely taught to this age group. This article describes the design of a novel educational block-based programming game, Pirate Plunder, which concentrates on how procedural abstraction is introduced and reinforced. The article then reports an extended evaluation to measure the game’s efficacy with children aged 10 and 11, finding that children who played the game were then able to use procedural abstraction in Scratch. The article then uses game analytics to explore why the game was effective and gives three recommendations for educational game design based on this research: using learning trajectories and restrictive success conditions to introduce complex content, increasing learner investment through customisable avatars and suggestions for improving the evaluations of educational games.
SN - 0735-6331
M3  - doi: 10.1177/0735633120932871
UR  - https://doi-org.crai.referencistas.com/10.1177/0735633120932871
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Debugging in Computational Thinking: A Meta-analysis on the Effects of Interventions on Debugging Skills
AU  - Sun, Chen
AU  - Yang, Stephanie
AU  - Becker, Betsy
Y1  - 2024/01/20
PY  - 2024
DA  - 2024/07/01
N1  - doi: 10.1177/07356331241227793
DO  - 10.1177/07356331241227793
T2  - Journal of Educational Computing Research
JF  - Journal of Educational Computing Research
SP  -1087
EP - 1121
VL - 62
IS - 4
PB - SAGE Publications Inc
N2 - Computational thinking (CT), an essential 21st century skill, incorporates key computer science concepts such as abstraction, algorithms, and debugging. Debugging is particularly underrepresented in the CT training literature. This multi-level meta-analysis focused on debugging as a core CT skill, and investigated the effects of various debugging interventions. Moderator analyses revealed which interventions were effective, in which situations, and for what kind of learner. A significant overall mean effect of debugging interventions ( = 0.64, CI = (0.32, 0.96), p < .001), was found based on 62 effect sizes from 18 source articles. Significant between-studies variation indicated that true effects could range from −0.54 to 1.82. In addition, sensitivity analyses and checks on confounding provided further understandings of intervention features and their impacts. Interventions using enhanced debuggers and systematic instruction were particularly effective in fostering debugging skills. Debugging intervention effects varied by participant population and potentially by publication type. Moreover, debugging interventions had impact regardless of how debugging skills were measured, programming medium used, control-group type, and whether the study was randomized. Future studies should investigate the best practices for improving debugging abilities for whom and under what circumstances.
SN - 0735-6331
M3  - doi: 10.1177/07356331241227793
UR  - https://doi-org.crai.referencistas.com/10.1177/07356331241227793
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Using a Physical Computing Project to Prepare Preservice Primary Teachers for Teaching Programing
AU  - Tsai, Fu-Hsing
Y1  - 2023/10/01
PY  - 2023
DA  - 2023/10/01
N1  - doi: 10.1177/21582440231205409
DO  - 10.1177/21582440231205409
T2  - Sage Open
JF  - Sage Open
SP  -21582440231205410
VL - 13
IS - 4
PB - SAGE Publications
N2 - The cultivation of computational thinking and programing education have gained prominence in K-12 education worldwide. Primary school teachers should be proficient in visual programing and using microcontrollers to teach programing courses. To cope with these trends, a learning activity was developed and implemented in Taiwan’s primary teacher education curriculum. The activity aimed to help preservice primary teachers learn about Scratch visual programing and micro:bit microcontroller boards by engaging in a physical computing project involving the design of an educational motion sensor game about energy. The results of the preliminary study found that the preservice primary teachers who participated in the activity were able to collaborate and develop motion sensor games suitable for primary school students. They also demonstrated significant improvements in their computational thinking concepts (t(10) = 3.13, p < .05) and energy knowledge test scores (t(10) = 2.74, p < .05). Furthermore, most participants expressed satisfaction with the activity, implying the activity’s feasibility for teacher education.
SN - 2158-2440
M3  - doi: 10.1177/21582440231205409
UR  - https://doi-org.crai.referencistas.com/10.1177/21582440231205409
Y2  - 2024/10/01
ER  - 

TY  - JOUR
T1  - Integrating Artificial Intelligence and Computational Thinking in Educational Contexts: A Systematic Review of Instructional Design and Student Learning Outcomes
AU  - Weng, Xiaojing
AU  - Ye, Huiyan
AU  - Dai, Yun
AU  - Ng, Oi-lam
Y1  - 2024/05/30
PY  - 2024
DA  - 2024/10/01
N1  - doi: 10.1177/07356331241248686
DO  - 10.1177/07356331241248686
T2  - Journal of Educational Computing Research
JF  - Journal of Educational Computing Research
SP  -1640
EP - 1670
VL - 62
IS - 6
PB - SAGE Publications Inc
N2 - A growing body of research is focusing on integrating artificial intelligence (AI) and computational thinking (CT) to enhance student learning outcomes. Many researchers have designed instructional activities to achieve various learning goals within this field. Despite the prevalence of studies focusing on instructional design and student learning outcomes, how instructional efforts result in the integration of AI and CT in students’ learning processes remains unclear. To address this research gap, we conducted a systematic literature review of empirical studies that have integrated AI and CT for student development. We collected 18 papers from four prominent research databases in the fields of education and AI technology: Web of Science, Scopus, IEEE, and ACM. We coded the collected studies, highlighting the students’ learning processes in terms of research methodology and context, learning tools and instructional design, student learning outcomes, and the interaction between AI and CT. The integration of AI and CT occurs in two ways: the integration of disciplinary knowledge and leveraging AI tools to learn CT. Specifically, we discovered that AI- and CT-related tools, projects, and problems facilitated student-centered instructional designs, resulting in productive AI and CT learning outcomes.
SN - 0735-6331
M3  - doi: 10.1177/07356331241248686
UR  - https://doi-org.crai.referencistas.com/10.1177/07356331241248686
Y2  - 2024/10/01
ER  - 

